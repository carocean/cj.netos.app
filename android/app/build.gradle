def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//apply plugin: 'com.huawei.agconnect'

android {
    compileSdkVersion 29

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "cj.netos.netos_app"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //这里是签名配置，
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
//        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
//        }
        release {
            signingConfig signingConfigs.release

            minifyEnabled true  //资源压缩设置
            useProguard true    //代码压缩设置
            zipAlignEnabled true //配置true,移除无用的resource文件,可以减小apk包的大小,有瘦身效果;
            shrinkResources true //是否对齐app所有资源,对齐后,会使得在运行时Android与应用程序间的交互更加有效率;
            //读取代码压缩配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //增加这里
        debug {
            signingConfig signingConfigs.release
        }
        profile {
            signingConfig signingConfigs.release
        }
    }

    configurations {
//这里要排除到这个包，这个包会与 com.google.guava 冲突，导致编译不过
        all*.exclude group: 'com.google.guava', module: 'listenablefuture'
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    //华为
    implementation 'com.huawei.hms:push:5.0.2.300'
    // 添加aar依赖到工程
    implementation fileTree(include: ['*.jar'],   dir: 'libs')
//    compile fileTree(dir: 'libs', include: ['*.jar'])
    //添加push sdk aar依赖
    implementation files("libs/vivo_pushsdk-v2.9.0.0.aar")
    //oppo
    implementation files("libs/com.heytap.msp.aar")
    //小米
    implementation files("libs/MiPush_SDK_Client_3_8_5.jar")
    project ':accept_share'
}
